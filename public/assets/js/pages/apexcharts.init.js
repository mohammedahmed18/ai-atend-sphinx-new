/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/pages/apexcharts.init.js":
/*!***********************************************!*\
  !*** ./resources/js/pages/apexcharts.init.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\r\nTemplate Name: UBold - Responsive Bootstrap 4 Admin Dashboard\r\nAuthor: CoderThemes\r\nWebsite: https://coderthemes.com/\r\nContact: support@coderthemes.com\r\nFile: Apex Charts\r\n*/\nApex.grid = {\n  padding: {\n    right: 0,\n    left: 0\n  }\n};\nApex.dataLabels = {\n  enabled: false\n};\n\nvar randomizeArray = function randomizeArray(arg) {\n  var array = arg.slice();\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}; // data for the sparklines that appear below header area\n\n\nvar sparklineData = [47, 45, 54, 38, 56, 24, 65, 31, 37, 39, 62, 51, 35, 41, 35, 27, 93, 53, 61, 27, 54, 43, 19, 46]; // the default colorPalette for this dashboard\n//var colorPalette = ['#01BFD6', '#5564BE', '#F7A600', '#EDCD24', '#F74F58'];\n\nvar colorPalette = ['#00D8B6', '#008FFB', '#FEB019', '#FF4560', '#775DD0'];\nvar colors = ['#6658dd'];\nvar dataColors = $(\"#spark1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar spark1 = {\n  chart: {\n    type: 'area',\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: 'straight'\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: 'UBold Sales ',\n    data: randomizeArray(sparklineData)\n  }],\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: '$424,652',\n    offsetX: 10,\n    style: {\n      fontSize: '22px'\n    }\n  },\n  subtitle: {\n    text: 'Total Sales',\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: '13px'\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark1\"), spark1).render();\nvar colors = ['#DCE6EC'];\nvar dataColors = $(\"#spark2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar spark2 = {\n  chart: {\n    type: 'area',\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: 'straight'\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: 'UBold Expenses ',\n    data: randomizeArray(sparklineData)\n  }],\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: '$235,312',\n    offsetX: 10,\n    style: {\n      fontSize: '22px'\n    }\n  },\n  subtitle: {\n    text: 'Expenses',\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: '13px'\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark2\"), spark2).render(); // Sparkline 2\n\nvar colors = ['#f672a7'];\nvar dataColors = $(\"#spark3\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar spark3 = {\n  chart: {\n    type: 'area',\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: 'straight'\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: 'Net Profits ',\n    data: randomizeArray(sparklineData)\n  }],\n  xaxis: {\n    crosshairs: {\n      width: 1\n    }\n  },\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: '$135,965',\n    offsetX: 10,\n    style: {\n      fontSize: '22px'\n    }\n  },\n  subtitle: {\n    text: 'Profits',\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: '13px'\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark3\"), spark3).render(); //\n// Line with Data Labels\n//\n\nvar colors = ['#6658dd', '#1abc9c'];\nvar dataColors = $(\"#apex-line-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    zoom: {\n      enabled: false\n    },\n    toolbar: {\n      show: false\n    }\n  },\n  colors: colors,\n  dataLabels: {\n    enabled: true\n  },\n  stroke: {\n    width: [3, 3],\n    curve: 'smooth'\n  },\n  series: [{\n    name: \"High - 2018\",\n    data: [28, 29, 33, 36, 32, 32, 33]\n  }, {\n    name: \"Low - 2018\",\n    data: [12, 11, 14, 18, 17, 13, 13]\n  }],\n  title: {\n    text: 'Average High & Low Temperature',\n    align: 'left',\n    style: {\n      fontSize: \"14px\",\n      color: '#666'\n    }\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#f1f3fa'\n  },\n  markers: {\n    style: 'inverted',\n    size: 6\n  },\n  xaxis: {\n    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n    title: {\n      text: 'Month'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Temperature'\n    },\n    min: 5,\n    max: 40\n  },\n  legend: {\n    position: 'top',\n    horizontalAlign: 'right',\n    floating: true,\n    offsetY: -25,\n    offsetX: -5\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-line-1\"), options);\nchart.render(); //\n// Gradient Line Chart\n//\n\nvar colors = ['#f672a7'];\nvar dataColors = $(\"#apex-line-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    shadow: {\n      enabled: false,\n      color: '#bbb',\n      top: 3,\n      left: 2,\n      blur: 3,\n      opacity: 1\n    }\n  },\n  stroke: {\n    width: 5,\n    curve: 'smooth'\n  },\n  series: [{\n    name: 'Likes',\n    data: [4, 3, 10, 9, 29, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5]\n  }],\n  xaxis: {\n    type: 'datetime',\n    categories: ['1/11/2000', '2/11/2000', '3/11/2000', '4/11/2000', '5/11/2000', '6/11/2000', '7/11/2000', '8/11/2000', '9/11/2000', '10/11/2000', '11/11/2000', '12/11/2000', '1/11/2001', '2/11/2001', '3/11/2001', '4/11/2001', '5/11/2001', '6/11/2001']\n  },\n  title: {\n    text: 'Social Media',\n    align: 'left',\n    style: {\n      fontSize: \"14px\",\n      color: '#666'\n    }\n  },\n  fill: {\n    type: 'gradient',\n    gradient: {\n      shade: 'dark',\n      gradientToColors: colors,\n      shadeIntensity: 1,\n      type: 'horizontal',\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 100, 100, 100]\n    }\n  },\n  markers: {\n    size: 4,\n    opacity: 0.9,\n    colors: [\"#56c2d6\"],\n    strokeColor: \"#fff\",\n    strokeWidth: 2,\n    style: 'inverted',\n    // full, hollow, inverted\n    hover: {\n      size: 7\n    }\n  },\n  yaxis: {\n    min: -10,\n    max: 40,\n    title: {\n      text: 'Engagement'\n    }\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#185a9d'\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-line-2\"), options);\nchart.render(); //\n// Area Chart\n//\n\nvar colors = ['#6658dd', '#f7b84b', '#CED4DC'];\nvar dataColors = $(\"#apex-area\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'area',\n    stacked: true,\n    events: {\n      selection: function selection(chart, e) {\n        console.log(new Date(e.xaxis.min));\n      }\n    }\n  },\n  colors: colors,\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [2],\n    curve: 'smooth'\n  },\n  series: [{\n    name: 'South',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'North',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 20\n    })\n  }, {\n    name: 'Central',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 15\n    })\n  }],\n  fill: {\n    type: 'gradient',\n    gradient: {\n      opacityFrom: 0.6,\n      opacityTo: 0.8\n    }\n  },\n  legend: {\n    position: 'top',\n    horizontalAlign: 'left'\n  },\n  xaxis: {\n    type: 'datetime'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-area\"), options);\nchart.render();\n/*\r\n  // this function will generate output in this format\r\n  // data = [\r\n      [timestamp, 23],\r\n      [timestamp, 33],\r\n      [timestamp, 12]\r\n      ...\r\n  ]\r\n  */\n\nfunction generateDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    series.push([x, y]);\n    baseval += 86400000;\n    i++;\n  }\n\n  return series;\n} //\n// Column Chart - 1\n//\n\n\nvar colors = ['#6658dd', '#1abc9c', '#CED4DC'];\nvar dataColors = $(\"#apex-column-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bar',\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      horizontal: false,\n      endingShape: 'rounded',\n      columnWidth: '55%'\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    show: true,\n    width: 2,\n    colors: ['transparent']\n  },\n  colors: colors,\n  series: [{\n    name: 'Net Profit',\n    data: [44, 55, 57, 56, 61, 58, 63, 60, 66]\n  }, {\n    name: 'Revenue',\n    data: [76, 85, 101, 98, 87, 105, 91, 114, 94]\n  }, {\n    name: 'Free Cash Flow',\n    data: [35, 41, 36, 26, 45, 48, 52, 53, 41]\n  }],\n  xaxis: {\n    categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct']\n  },\n  legend: {\n    offsetY: 5\n  },\n  yaxis: {\n    title: {\n      text: '$ (thousands)'\n    }\n  },\n  fill: {\n    opacity: 1\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  tooltip: {\n    y: {\n      formatter: function formatter(val) {\n        return \"$ \" + val + \" thousands\";\n      }\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-column-1\"), options);\nchart.render(); //\n// Column Chart - 2\n//\n\nvar colors = ['#6658dd'];\nvar dataColors = $(\"#apex-column-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bar',\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      dataLabels: {\n        position: 'top' // top, center, bottom\n\n      }\n    }\n  },\n  dataLabels: {\n    enabled: true,\n    formatter: function formatter(val) {\n      return val + \"%\";\n    },\n    offsetY: -30,\n    style: {\n      fontSize: '12px',\n      colors: [\"#304758\"]\n    }\n  },\n  colors: colors,\n  series: [{\n    name: 'Inflation',\n    data: [2.3, 3.1, 4.0, 10.1, 4.0, 3.6, 3.2, 2.3, 1.4, 0.8, 0.5, 0.2]\n  }],\n  xaxis: {\n    categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    position: 'top',\n    labels: {\n      offsetY: -18\n    },\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    },\n    crosshairs: {\n      fill: {\n        type: 'gradient',\n        gradient: {\n          colorFrom: '#D8E3F0',\n          colorTo: '#BED1E6',\n          stops: [0, 100],\n          opacityFrom: 0.4,\n          opacityTo: 0.5\n        }\n      }\n    },\n    tooltip: {\n      enabled: true,\n      offsetY: -35\n    }\n  },\n  fill: {\n    gradient: {\n      enabled: false,\n      shade: 'light',\n      type: \"horizontal\",\n      shadeIntensity: 0.25,\n      gradientToColors: undefined,\n      inverseColors: true,\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [50, 0, 100, 100]\n    }\n  },\n  yaxis: {\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    },\n    labels: {\n      show: false,\n      formatter: function formatter(val) {\n        return val + \"%\";\n      }\n    }\n  },\n  title: {\n    text: 'Monthly Inflation in Argentina, 2002',\n    floating: true,\n    offsetY: 350,\n    align: 'center',\n    style: {\n      color: '#444'\n    }\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-column-2\"), options);\nchart.render(); //\n// Mixed Chart - 1\n//\n\nvar colors = ['#CED4DC', '#6658dd'];\nvar dataColors = $(\"#apex-mixed-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line'\n  },\n  stroke: {\n    width: 2,\n    curve: 'smooth'\n  },\n  series: [{\n    name: 'TEAM A',\n    type: 'area',\n    data: [44, 55, 31, 47, 31, 43, 26, 41, 31, 47, 33]\n  }, {\n    name: 'TEAM B',\n    type: 'line',\n    data: [55, 69, 45, 61, 43, 54, 37, 52, 44, 61, 43]\n  }],\n  colors: colors,\n  fill: {\n    type: 'solid',\n    opacity: [0.35, 1]\n  },\n  labels: ['Dec 01', 'Dec 02', 'Dec 03', 'Dec 04', 'Dec 05', 'Dec 06', 'Dec 07', 'Dec 08', 'Dec 09 ', 'Dec 10', 'Dec 11'],\n  markers: {\n    size: 0\n  },\n  yaxis: [{\n    title: {\n      text: 'Series A'\n    }\n  }, {\n    opposite: true,\n    title: {\n      text: 'Series B'\n    }\n  }],\n  tooltip: {\n    shared: true,\n    intersect: false,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y.toFixed(0) + \" points\";\n        }\n\n        return y;\n      }\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-1\"), options);\nchart.render(); //\n// Bar Chart - 1\n//\n\nvar colors = ['#1abc9c'];\nvar dataColors = $(\"#apex-bar-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bar',\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      horizontal: true\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n  }],\n  colors: colors,\n  xaxis: {\n    categories: ['South Korea', 'Canada', 'United Kingdom', 'Netherlands', 'Italy', 'France', 'Japan', 'United States', 'China', 'Germany']\n  },\n  states: {\n    hover: {\n      filter: 'none'\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bar-1\"), options);\nchart.render(); //\n// Bar Chart - 2\n//\n\nvar colors = ['#6658dd', '#1abc9c'];\nvar dataColors = $(\"#apex-bar-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = _defineProperty({\n  chart: {\n    height: 380,\n    type: 'bar',\n    stacked: true,\n    toolbar: {\n      show: false\n    }\n  },\n  colors: colors,\n  plotOptions: {\n    bar: {\n      horizontal: true,\n      barHeight: '80%'\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: 1,\n    colors: [\"#fff\"]\n  },\n  series: [{\n    name: 'Males',\n    data: [0.4, 0.65, 0.76, 0.88, 1.5, 2.1, 2.9, 3.8, 3.9, 4.2, 4, 4.3, 4.1, 4.2, 4.5, 3.9, 3.5, 3]\n  }, {\n    name: 'Females',\n    data: [-0.8, -1.05, -1.06, -1.18, -1.4, -2.2, -2.85, -3.7, -3.96, -4.22, -4.3, -4.4, -4.1, -4, -4.1, -3.4, -3.1, -2.8]\n  }],\n  grid: {\n    xaxis: {\n      showLines: false\n    }\n  },\n  yaxis: {\n    min: -5,\n    max: 5,\n    title: {// text: 'Age',\n    }\n  },\n  tooltip: {\n    shared: false,\n    x: {\n      formatter: function formatter(val) {\n        return val;\n      }\n    },\n    y: {\n      formatter: function formatter(val) {\n        return Math.abs(val) + \"%\";\n      }\n    }\n  },\n  xaxis: {\n    categories: ['85+', '80-84', '75-79', '70-74', '65-69', '60-64', '55-59', '50-54', '45-49', '40-44', '35-39', '30-34', '25-29', '20-24', '15-19', '10-14', '5-9', '0-4'],\n    title: {\n      text: 'Percent'\n    },\n    labels: {\n      formatter: function formatter(val) {\n        return Math.abs(Math.round(val)) + \"%\";\n      }\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n}, \"grid\", {\n  borderColor: '#f1f3fa'\n});\n\nvar chart = new ApexCharts(document.querySelector(\"#apex-bar-2\"), options);\nchart.render(); //\n// Mixed Chart - 2\n//\n\nvar colors = ['#6658dd', '#1abc9c', \"#f672a7\"];\nvar dataColors = $(\"#apex-mixed-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    padding: {\n      right: 0,\n      left: 0\n    },\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  stroke: {\n    width: [0, 2, 4],\n    curve: 'smooth'\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '50%'\n    }\n  },\n  colors: colors,\n  series: [{\n    name: 'Team A',\n    type: 'column',\n    data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30]\n  }, {\n    name: 'Team B',\n    type: 'area',\n    data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\n  }, {\n    name: 'Team C',\n    type: 'line',\n    data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\n  }],\n  fill: {\n    opacity: [0.85, 0.25, 1],\n    gradient: {\n      inverseColors: false,\n      shade: 'light',\n      type: \"vertical\",\n      opacityFrom: 0.85,\n      opacityTo: 0.55,\n      stops: [0, 100, 100, 100]\n    }\n  },\n  labels: ['01/01/2003', '02/01/2003', '03/01/2003', '04/01/2003', '05/01/2003', '06/01/2003', '07/01/2003', '08/01/2003', '09/01/2003', '10/01/2003', '11/01/2003'],\n  markers: {\n    size: 0\n  },\n  legend: {\n    offsetY: 7\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  yaxis: {\n    title: {\n      text: 'Points'\n    }\n  },\n  tooltip: {\n    shared: true,\n    intersect: false,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y.toFixed(0) + \" points\";\n        }\n\n        return y;\n      }\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-2\"), options);\nchart.render(); //\n// Mixed Chart - 3\n//\n\nvar colors = [\"#6658dd,#ebf2f6,#f672a7\"];\nvar dataColors = $(\"#apex-mixed-3\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [0, 0, 3]\n  },\n  series: [{\n    name: 'Income',\n    type: 'column',\n    data: [1.4, 2, 2.5, 1.5, 2.5, 2.8, 3.8, 4.6]\n  }, {\n    name: 'Cashflow',\n    type: 'column',\n    data: [1.1, 3, 3.1, 4, 4.1, 4.9, 6.5, 8.5]\n  }, {\n    name: 'Revenue',\n    type: 'line',\n    data: [20, 29, 37, 36, 44, 45, 50, 58]\n  }],\n  colors: colors,\n  xaxis: {\n    categories: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]\n  },\n  yaxis: [{\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: '#675db7'\n    },\n    labels: {\n      style: {\n        color: '#675db7'\n      }\n    },\n    title: {\n      text: \"Income (thousand crores)\"\n    }\n  }, {\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: '#23b397'\n    },\n    labels: {\n      style: {\n        color: '#23b397'\n      },\n      offsetX: 10\n    },\n    title: {\n      text: \"Operating Cashflow (thousand crores)\"\n    }\n  }, {\n    opposite: true,\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: '#e36498'\n    },\n    labels: {\n      style: {\n        color: '#e36498'\n      }\n    },\n    title: {\n      text: \"Revenue (thousand crores)\"\n    }\n  }],\n  tooltip: {\n    followCursor: true,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y + \" thousand crores\";\n        }\n\n        return y;\n      }\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      yaxis: {\n        show: false\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-3\"), options);\nchart.render(); //\n// Bubble Chart - 1\n//\n\nfunction generateData(baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    var x = Math.floor(Math.random() * (750 - 1 + 1)) + 1;\n    ;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    var z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n    series.push([x, y, z]);\n    baseval += 86400000;\n    i++;\n  }\n\n  return series;\n}\n\nvar colors = ['#6658dd,#1abc9c,#f672a7'];\nvar dataColors = $(\"#apex-bubble-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bubble',\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    name: 'Bubble 1',\n    data: generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Bubble 2',\n    data: generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Bubble 3',\n    data: generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }],\n  fill: {\n    opacity: 0.8,\n    gradient: {\n      enabled: false\n    }\n  },\n  colors: colors,\n  xaxis: {\n    tickAmount: 12,\n    type: 'category'\n  },\n  yaxis: {\n    max: 70\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bubble-1\"), options);\nchart.render(); //\n// Bubble Chart - 2\n//\n\n/*\r\n// this function will generate output in this format\r\n// data = [\r\n  [timestamp, 23],\r\n  [timestamp, 33],\r\n  [timestamp, 12]\r\n  ...\r\n]\r\n*/\n\nfunction generateData1(baseval1, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    //var x =Math.floor(Math.random() * (750 - 1 + 1)) + 1;;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    var z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n    series.push([baseval1, y, z]);\n    baseval1 += 86400000;\n    i++;\n  }\n\n  return series;\n}\n\nvar colors = ['#6658dd,#1abc9c,#f672a7,#6c757d'];\nvar dataColors = $(\"#apex-bubble-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options2 = {\n  chart: {\n    height: 380,\n    type: 'bubble',\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    name: 'Product 1',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Product 2',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Product 3',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Product 4',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }],\n  fill: {\n    type: 'gradient'\n  },\n  colors: colors,\n  xaxis: {\n    tickAmount: 12,\n    type: 'datetime',\n    labels: {\n      rotate: 0\n    }\n  },\n  yaxis: {\n    max: 70\n  },\n  legend: {\n    offsetY: 7\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bubble-2\"), options2);\nchart.render(); //\n// Scatter Chart - 1\n//\n\nvar colors = ['#1abc9c', \"#f672a7\", \"#6c757d\"];\nvar dataColors = $(\"#apex-scatter-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'scatter',\n    zoom: {\n      enabled: false\n    }\n  },\n  series: [{\n    name: \"Sample A\",\n    data: [[16.4, 5.4], [21.7, 2], [25.4, 3], [19, 2], [10.9, 1], [13.6, 3.2], [10.9, 7.4], [10.9, 0], [10.9, 8.2], [16.4, 0], [16.4, 1.8], [13.6, 0.3], [13.6, 0], [29.9, 0], [27.1, 2.3], [16.4, 0], [13.6, 3.7], [10.9, 5.2], [16.4, 6.5], [10.9, 0], [24.5, 7.1], [10.9, 0], [8.1, 4.7], [19, 0], [21.7, 1.8], [27.1, 0], [24.5, 0], [27.1, 0], [29.9, 1.5], [27.1, 0.8], [22.1, 2]]\n  }, {\n    name: \"Sample B\",\n    data: [[6.4, 13.4], [1.7, 11], [5.4, 8], [9, 17], [1.9, 4], [3.6, 12.2], [1.9, 14.4], [1.9, 9], [1.9, 13.2], [1.4, 7], [6.4, 8.8], [3.6, 4.3], [1.6, 10], [9.9, 2], [7.1, 15], [1.4, 0], [3.6, 13.7], [1.9, 15.2], [6.4, 16.5], [0.9, 10], [4.5, 17.1], [10.9, 10], [0.1, 14.7], [9, 10], [12.7, 11.8], [2.1, 10], [2.5, 10], [27.1, 10], [2.9, 11.5], [7.1, 10.8], [2.1, 12]]\n  }, {\n    name: \"Sample C\",\n    data: [[21.7, 3], [23.6, 3.5], [24.6, 3], [29.9, 3], [21.7, 20], [23, 2], [10.9, 3], [28, 4], [27.1, 0.3], [16.4, 4], [13.6, 0], [19, 5], [22.4, 3], [24.5, 3], [32.6, 3], [27.1, 4], [29.6, 6], [31.6, 8], [21.6, 5], [20.9, 4], [22.4, 0], [32.6, 10.3], [29.7, 20.8], [24.5, 0.8], [21.4, 0], [21.7, 6.9], [28.6, 7.7], [15.4, 0], [18.1, 0], [33.4, 0], [16.4, 0]]\n  }],\n  xaxis: {\n    tickAmount: 10\n  },\n  yaxis: {\n    tickAmount: 7\n  },\n  colors: colors,\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-scatter-1\"), options);\nchart.render(); //\n// Scatter Chart - 2\n//\n\nvar colors = ['#1abc9c', \"#f672a7\", \"#6c757d\", \"#6658dd\", \"#6559cc\"];\nvar dataColors = $(\"#apex-scatter-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 380,\n    type: 'scatter',\n    zoom: {\n      type: 'xy'\n    }\n  },\n  series: [{\n    name: 'Team 1',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 2',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 3',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 4',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 5',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }],\n  dataLabels: {\n    enabled: false\n  },\n  colors: colors,\n  grid: {\n    borderColor: '#f1f3fa',\n    xaxis: {\n      showLines: true\n    },\n    yaxis: {\n      showLines: true\n    },\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  yaxis: {\n    max: 70\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-scatter-2\"), options);\nchart.render();\n/*\r\n// this function will generate output in this format\r\n// data = [\r\n  [timestamp, 23],\r\n  [timestamp, 33],\r\n  [timestamp, 12]\r\n  ...\r\n]\r\n*/\n//\n// Candlestick Chart - 1\n//\n\nvar colors = ['#6658dd', '#1abc9c'];\nvar dataColors = $(\"#apex-candlestick-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 400,\n    type: 'candlestick'\n  },\n  plotOptions: {\n    candlestick: {\n      colors: {\n        upward: colors[0],\n        downward: colors[1]\n      }\n    }\n  },\n  series: [{\n    data: seriesData\n  }],\n  stroke: {\n    show: true,\n    colors: '#f1f3fa',\n    width: [1, 4]\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-candlestick-1\"), options);\nchart.render(); //\n// Candlestick Chart - 2\n//\n\nvar colors = ['#6658dd', '#f7b84b'];\nvar dataColors = $(\"#apex-candlestick-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar optionsCandlestick = {\n  chart: {\n    height: 240,\n    type: 'candlestick',\n    toolbar: {\n      show: false\n    },\n    zoom: {\n      enabled: false\n    }\n  },\n  series: [{\n    data: seriesData\n  }],\n  plotOptions: {\n    candlestick: {\n      colors: {\n        upward: colors[0],\n        downward: colors[1]\n      }\n    }\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chartCandlestick = new ApexCharts(document.querySelector(\"#apex-candlestick-2\"), optionsCandlestick);\nchartCandlestick.render(); //\n// Candlestick Chart - 3\n//\n\nvar colors = ['#f45454', '#37cde6'];\nvar dataColors = $(\"#apex-candlestick-3\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 160,\n    type: 'bar',\n    toolbar: {\n      show: false,\n      autoSelected: 'selection'\n    },\n    selection: {\n      xaxis: {\n        min: new Date('20 Jan 2017').getTime(),\n        max: new Date('10 Dec 2017').getTime()\n      },\n      fill: {\n        color: '#6c757d',\n        opacity: 0.4\n      },\n      stroke: {\n        color: '#6c757d'\n      }\n    },\n    events: {\n      selection: function selection(chart, e) {\n        chartCandlestick.updateOptions({\n          xaxis: {\n            min: e.xaxis.min,\n            max: e.xaxis.max\n          }\n        }, false, false);\n      }\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '80%',\n      colors: {\n        ranges: [{\n          from: -1000,\n          to: 0,\n          color: colors[0]\n        }, {\n          from: 1,\n          to: 10000,\n          color: colors[1]\n        }]\n      }\n    }\n  },\n  series: [{\n    name: 'volume',\n    data: seriesDataLinear\n  }],\n  xaxis: {\n    type: 'datetime',\n    axisBorder: {\n      offsetX: 13\n    }\n  },\n  yaxis: {\n    labels: {\n      show: false\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-candlestick-3\"), options);\nchart.render(); //\n// Pie Chart -1\n//\n\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 320,\n    type: 'pie'\n  },\n  series: [44, 55, 41, 17, 15],\n  labels: [\"Series 1\", \"Series 2\", \"Series 3\", \"Series 4\", \"Series 5\"],\n  colors: colors,\n  legend: {\n    show: true,\n    position: 'bottom',\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    floating: false,\n    fontSize: '14px',\n    offsetX: 0,\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-1\"), options);\nchart.render(); //\n// Pie Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 320,\n    type: 'donut'\n  },\n  series: [44, 55, 41, 17, 15],\n  legend: {\n    show: true,\n    position: 'bottom',\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    floating: false,\n    fontSize: '14px',\n    offsetX: 0,\n    offsetY: 7\n  },\n  labels: [\"Series 1\", \"Series 2\", \"Series 3\", \"Series 4\", \"Series 5\"],\n  colors: colors,\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }],\n  fill: {\n    type: 'gradient'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-2\"), options);\nchart.render(); //\n// Pie Chart - 3\n//\n\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-3\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 320,\n    type: 'donut',\n    dropShadow: {\n      enabled: true,\n      color: '#111',\n      top: -1,\n      left: 3,\n      blur: 3,\n      opacity: 0.2\n    }\n  },\n  stroke: {\n    show: true,\n    width: 2\n  },\n  series: [44, 55, 41, 17, 15],\n  colors: colors,\n  labels: [\"Comedy\", \"Action\", \"SciFi\", \"Drama\", \"Horror\"],\n  dataLabels: {\n    dropShadow: {\n      blur: 3,\n      opacity: 0.8\n    }\n  },\n  fill: {\n    type: 'pattern',\n    opacity: 1,\n    pattern: {\n      enabled: true,\n      style: ['verticalLines', 'squares', 'horizontalLines', 'circles', 'slantedLines']\n    }\n  },\n  states: {\n    hover: {\n      enabled: false\n    }\n  },\n  legend: {\n    show: true,\n    position: 'bottom',\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    floating: false,\n    fontSize: '14px',\n    offsetX: 0,\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-3\"), options);\nchart.render(); //\n// Radialbar Chart -1\n//\n\nvar colors = ['#6c757d'];\nvar dataColors = $(\"#apex-radialbar-1\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 350,\n    type: 'radialBar'\n  },\n  plotOptions: {\n    radialBar: {\n      hollow: {\n        size: '70%'\n      }\n    }\n  },\n  colors: [\"#6c757d\"],\n  series: [70],\n  labels: ['CRICKET']\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-1\"), options);\nchart.render(); //\n// Radialbar Chart - 2\n//\n\nvar colors = [\"#6658dd\", \"#e36498\", \"#23b397\", \"#f7b84b\"];\nvar dataColors = $(\"#apex-radialbar-2\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 350,\n    type: 'radialBar'\n  },\n  plotOptions: {\n    radialBar: {\n      dataLabels: {\n        name: {\n          fontSize: '22px'\n        },\n        value: {\n          fontSize: '16px'\n        },\n        total: {\n          show: true,\n          label: 'Total',\n          formatter: function formatter(w) {\n            // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n            return 249;\n          }\n        }\n      }\n    }\n  },\n  colors: colors,\n  series: [44, 55, 67, 83],\n  labels: ['Apples', 'Oranges', 'Bananas', 'Berries']\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-2\"), options);\nchart.render(); //\n// Radialbar Chart - 3\n//\n\nvar colors = ['#f1556c'];\nvar dataColors = $(\"#apex-radialbar-3\").data('colors');\n\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\n\nvar options = {\n  chart: {\n    height: 375,\n    type: 'radialBar'\n  },\n  plotOptions: {\n    radialBar: {\n      startAngle: -135,\n      endAngle: 135,\n      dataLabels: {\n        name: {\n          fontSize: '16px',\n          color: undefined,\n          offsetY: 120\n        },\n        value: {\n          offsetY: 76,\n          fontSize: '22px',\n          color: undefined,\n          formatter: function formatter(val) {\n            return val + \"%\";\n          }\n        }\n      }\n    }\n  },\n  fill: {\n    gradient: {\n      enabled: true,\n      shade: 'dark',\n      shadeIntensity: 0.15,\n      inverseColors: false,\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 50, 65, 91]\n    }\n  },\n  stroke: {\n    dashArray: 4\n  },\n  colors: colors,\n  series: [67],\n  labels: ['Median Ratio'],\n  responsive: [{\n    breakpoint: 380,\n    options: {\n      chart: {\n        height: 280\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-3\"), options);\nchart.render();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/apexcharts.init.js\n");

/***/ }),

/***/ 2:
/*!*****************************************************!*\
  !*** multi ./resources/js/pages/apexcharts.init.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\Mohammed\Desktop\ai-attend\resources\js\pages\apexcharts.init.js */"./resources/js/pages/apexcharts.init.js");


/***/ })

/******/ });